from flask import Flask, request, jsonify
import openai
import os

app = Flask(__name__)

# üîê √Ä remplacer par ta propre cl√© API OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

@app.route('/analyse', methods=['POST'])
def analyse():
    data = request.json

    # R√©cup√©ration des donn√©es du formulaire
    nom = data.get("nom", "Client inconnu")
    statut = data.get("statut", "Non pr√©cis√©")
    activite = data.get("activite", "Non pr√©cis√©e")
    ca = data.get("ca", "Non pr√©cis√©")
    salaries = data.get("salaries", "Non pr√©cis√©")
    vehicules = data.get("vehicules", "Non pr√©cis√©")
    local = data.get("local", "Non pr√©cis√©")
    contrats = data.get("contrats", "Non pr√©cis√©")
    commentaires = data.get("commentaires", "")

    # Prompt enrichi avec contexte Valier Assurance
    prompt = f"""
Tu es un assistant du cabinet de courtage VALIER, sp√©cialis√© en assurance IARD pour les TPE/PME du BTP, du commerce, de l‚Äôartisanat et des services.

Analyse les donn√©es suivantes et propose une synth√®se claire des besoins assurantiels du client :

- Raison sociale : {nom}
- Statut juridique : {statut}
- Activit√© principale : {activite}
- Chiffre d'affaires : {ca}
- Nombre de salari√©s : {salaries}
- V√©hicules / engins : {vehicules}
- Local professionnel : {local}
- Contrats existants : {contrats}
- Commentaires : {commentaires}

Objectifs :
1. D√©terminer les risques √† couvrir.
2. Proposer les contrats n√©cessaires ou √† optimiser (RC pro, d√©cennale, flotte, MRP, sant√©, PJ...).
3. D√©tecter les carences.
4. Sugg√©rer un plan synth√©tique d‚Äôaction, clair, en moins de 250 mots.

Utilise un ton professionnel, concis, orient√© courtier. Ne fais pas de g√©n√©ralit√©s vagues.
"""

    # Appel √† l'API OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Tu es un expert en assurance professionnelle."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=600
        )

        message = response['choices'][0]['message']['content']
        return jsonify({"diagnostic": message})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
     import os
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
